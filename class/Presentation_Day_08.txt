Numbers:
--------
	* Number systems
		* Binary
		* Octal
		* Hexadecimal
	* Type conversion

List:
-----
	* Indexing
	* Negative indexing
	* Slicing
	* Add/Change list elements
	* Delete/Remove list elemets
	* Concatenation
	* List comprehension
	* Membership test
	* Iteration
	* List operations

Tuple:
------
	* Indexing
	* Negative indexing
	* Slicing
	* Changing a tuple
	* Deleting a tuple
	* Concatination
	* Mebership test
	* Iteration
	* Tuple operations

String:
-------
	* Indexing 
	* Negative indexing
	* Slicing
	* Changing a string
	* Deleting a string
	* Concatenation
	* String formatting
		* Escape sequence
		* Raw string to escape from escape sequences
		* format()
	* Membership test
	* Iteration
	* String Operations

Dictionary:
-----------
	* Accessing Dictionary elements
	* Change/Add element
	* Removing elements
	* Dictionary comprehension
	* Membership test
	* Iteration
	* Dictionary operations


octel value:
0
1
2
3
4
5
6
7
10
11
12
13
14
15
16
17
20
21
22
23
24


C:\Users\zilogic>python
Python 3.9.0 (tags/v3.9.0:9cf6752, Oct  5 2020, 15:34:40) [MSC v.1927 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> integer_no = 11
>>> float_no = 22.22
>>>
>>> print("Type of variable integer_no is : ",type(integer_no))
Type of variable integer_no is :  <class 'int'>
>>> print("Type of variable float_no is : ",type(float_no))
Type of variable float_no is :  <class 'float'>
>>>
>>>
>>> string_in_digit = '111'
>>>
>>>
>>> type(string_in_digit)
<class 'str'>
>>>
>>>
>>> a = int(string_in_digit)
>>>
>>> type(a)
<class 'int'>
>>> a
111
>>> a = float(string_in_digit)
>>> type(a)
<class 'float'>
>>> a
111.0
>>>
>>> binary_string = '0b1010'
>>> int(binary_string, 2)
10
>>>
>>> octel_string = '0o11'
>>> int(octel_string, 8)
9
>>> bin(integer_no)
'0b1011'
>>> integer_no = 15
>>> bin(integer_no)
'0b1111'
>>> oct(integer_no)
'0o17'
>>> hex(integer_no)
'0xf'
>>>
>>>
>>> my_list_01 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
>>>
>>> print("3rd element of my_list_01 is : ", my_list_01[2])
3rd element of my_list_01 is :  13
>>>
>>> my_list_01[0]
11
>>> my_list_01[1]
12
>>> my_list_01[-4]
20
>>> my_list_01[0 : 3]
[11, 12, 13]
>>> my_list_01[-5 : -2]
[19, 20, 21]
>>> my_list_01[3 : 8]
[14, 15, 16, 17, 18]
>>> my_list_01[-10 : -5]
[14, 15, 16, 17, 18]
>>> my_list_01[3 : -5]
[14, 15, 16, 17, 18]
>>> my_list_01[-10 : 8]
[14, 15, 16, 17, 18]
>>>
>>> my_list_01
[11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
>>> my_list_01[0] = 21
>>> my_list_01
[21, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
>>>
>>>
>>> my_list_01.append(24)
>>> my_list_01
[21, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
>>> help(my_list_01.insert)
Help on built-in function insert:

insert(index, object, /) method of builtins.list instance
    Insert object before index.

>>> my_list_01.insert(4, 'zilogic')
>>> my_list_01
[21, 12, 13, 14, 'zilogic', 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
>>>
>>>
>>> del(my_list_of[4])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'my_list_of' is not defined
>>> del(my_list_01[4])
>>> my_list_01
[21, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
>>>
>>>
>>> my_list_01.remove(20)
>>> my_list_01
[21, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24]
>>>
>>>
>>> l1 = list(range(1, 11))
>>> print ("l1 is : ", l1)
l1 is :  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
>>>
>>> l2 = list(range(11, 21))
>>> print ("l2 is : ", l2)
l2 is :  [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
>>>
>>> l3 = l1 + l2
>>> print ("Concatenation of l1 and l2 is : ", l3)
Concatenation of l1 and l2 is :  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
>>>
>>> even_no = [element for element in l3 if element % 2 == 0]
>>> even_no
[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
>>>
>>> wifi_team = ['ashok', 'kannan', 'manikandan', 'ithiris', 'manish', 'john', 'jagan', 'mugundhan', 'prasanth', 'zubair', 'ranjitha', 'maheshwari', 'mounika', 'indira', 'gayathri']
>>>
>>> if 'kannan' in wifi_team:
...     print ("Yes kannan in wifi team")
...
Yes kannan in wifi team
>>> if 'vijay' not in wifi_team:
...     print ("Yes, vijay not in wifi team")
...
Yes, vijay not in wifi team
>>>
>>> for value in wifi_team:
...     print (value)
...
ashok
kannan
manikandan
ithiris
manish
john
jagan
mugundhan
prasanth
zubair
ranjitha
maheshwari
mounika
indira
gayathri
>>>
>>> modifiable_tuple = (1, 2, 3, [5, 6, 7])
>>>
>>>
>>> modifiable_tuple[0] = "dfanl"
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> modifiable_tuple[3][0] = 9
>>> modifiable_tuple
(1, 2, 3, [9, 6, 7])
>>> modifiable_tuple[3][0].append(10)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'int' object has no attribute 'append'
>>> modifiable_tuple[3].append(10)
>>> modifiable_tuple
(1, 2, 3, [9, 6, 7, 10])
>>>
>>>
>>> second_string = "this  my string to modify"
>>>
>>> second_string[:5]
'this '
>>>
>>> second_string[5:]
' my string to modify'
>>>
>>> modified_string = second_string[:5] + 'is' + second_string[5:]
>>>
>>> modified_string
'this is my string to modify'
>>> second_string
'this  my string to modify'
>>> modified_string.toupper()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'str' object has no attribute 'toupper'
>>> dir(modified_string)
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'removeprefix', 'removesuffix', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
>>> modified_string.upper()
'THIS IS MY STRING TO MODIFY'
>>>
>>> dir('')
['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'removeprefix', 'removesuffix', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
>>>
>>> dir([])
['__add__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
>>> office_dict = {"name" : "Zilogic",
...                "location" : "Thiruvanmiyur",
...                "district" : "Chennai",
...                "phone" : 123456789}
>>>
>>> office_dict
{'name': 'Zilogic', 'location': 'Thiruvanmiyur', 'district': 'Chennai', 'phone': 123456789}
>>>
>>>
>>>
>>> office_dict['location']
'Thiruvanmiyur'
>>> print ("office name : ", office_dict["name"])
office name :  Zilogic
>>> print ("office location : ", office_dict["location"])
office location :  Thiruvanmiyur
>>> print ("office district  : ", office_dict["district"])
office district  :  Chennai
>>>
>>>
>>> office_dict
{'name': 'Zilogic', 'location': 'Thiruvanmiyur', 'district': 'Chennai', 'phone': 123456789}
>>> office_dict["phone"] = 987654321
>>> office_dict
{'name': 'Zilogic', 'location': 'Thiruvanmiyur', 'district': 'Chennai', 'phone': 987654321}
>>>
>>> office_dict["md"] = "ganesan"
>>>
>>> office_dict
{'name': 'Zilogic', 'location': 'Thiruvanmiyur', 'district': 'Chennai', 'phone': 987654321, 'md': 'ganesan'}
>>>
>>>
>>> office_dict.pop('location')
'Thiruvanmiyur'
>>> office_dict
{'name': 'Zilogic', 'district': 'Chennai', 'phone': 987654321, 'md': 'ganesan'}
>>>
>>> if "name" in office_dict:
...     print ("name is : ", office_dict['name'])
...
name is :  Zilogic
>>> if "namastes" in office_dict:
...     print ("name is : ", office_dict['namastes'])
...
>>>
>>> for key in office_dict:
...     print ("key : {}, value : {}".format(key, office_dict[key]))
...
key : name, value : Zilogic
key : district, value : Chennai
key : phone, value : 987654321
key : md, value : ganesan
>>>
>>>
>>>
>>> exit()


Detect 1. P1 time out 2. P2 timeout in Ping logs
07:50 PM
Say we have 5 P1 timeouts and 2 P2 timeouts and we also have the time stamps of the 7 timeouts
07:50 PM
In the 7 time, go an check if we have a gateway not reachable in comm logs
07:51 PM
If yes, also get the channel load
07:52 PM
If channel load > 75% : Raise CR ; Else No CR
07:53 PM
P1 time out is at 6.30, you may have not reachable and the channel load log for channel 120, between 6.28PM and 6.32 PM
07:54 PM
Fitsy one is ping log and second is for comm log
07:55 PM
If channel load < 60% : Raise CR ; Else No CR
07:56 PM
If channel load > 75% : if you have P1 timeout or P2 timeout : NO CR will be raised
07:57 PM
If channel load < 60% : Raise CR ; Else No CR